3.1) Collectors.toList() :
List<Student> top3Students = studentList.stream().sorted(Comparator.comparingDouble(Student::getPercentage).reversed()).limit(3).collect(Collectors.toList());
3.2) Collectors.toSet() :
Set<String> subjects = studentList.stream().map(Student::getSubject).collect(Collectors.toSet());
3.3) Collectors.toMap() :
Example : Collecting name and percentage of each student into a Map
Map<String, Double> namePercentageMap = studentList.stream().collect(Collectors.toMap(Student::getName, Student::getPercentage));       
3.4) Collectors.toCollection() :
Example : Collecting first 3 students into LinkedList
LinkedList<Student> studentLinkedList = studentList.stream().limit(3).collect(Collectors.toCollection(LinkedList::new));
3.5) Collectors.joining() :
Example : Collecting the names of all students joined as a string
String namesJoined = studentList.stream().map(Student::getName).collect(Collectors.joining(", "));         
System.out.println(namesJoined);
3.6) Collectors.counting() :
Example : Counting number of students.
Long studentCount = studentList.stream().collect(Collectors.counting());
3.7) Collectors.maxBy() :
Example : Collecting highest percentage.
Optional<Double> highPercentage = studentList.stream().map(Student::getPercentage).collect(Collectors.maxBy(Comparator.naturalOrder()));
3.8) Collectors.minBy() :
Example : Collecting lowest percentage.
Optional<Double> lowPercentage = studentList.stream().map(Student::getPercentage).collect(Collectors.minBy(Comparator.naturalOrder()));
3.9) summingInt(), summingLong(), summingDouble()
Example : Collecting sum of percentages
Double sumOfPercentages = studentList.stream().collect(Collectors.summingDouble(Student::getPercentage));
3.10) averagingInt(), averagingLong(), averagingDouble()
Example : Collecting average percentage
Double averagePercentage = studentList.stream().collect(Collectors.averagingDouble(Student::getPercentage));       
System.out.println(averagePercentage);       
//Output : 81.5
3.11) summarizingInt(), summarizingLong(), summarizingDouble()
Example : Extracting highest, lowest and average of percentage of students
DoubleSummaryStatistics studentStats = studentList.stream().collect(Collectors.summarizingDouble(Student::getPercentage));      
System.out.println("Highest Percentage : "+studentStats.getMax());      
System.out.println("Lowest Percentage : "+studentStats.getMin());       
System.out.println("Average Percentage : "+studentStats.getAverage());
3.12) Collectors.groupingBy() :
Example : Grouping the students by subject
Map<String, List<Student>> studentsGroupedBySubject = studentList.stream().collect(Collectors.groupingBy(Student::getSubject));
3.13) Collectors.partitioningBy() :
Example : Partitioning the students who got above 80.0% from who donâ€™t.
Map<Boolean, List<Student>> studentspartionedByPercentage = studentList.stream().collect(Collectors.partitioningBy(student -> student.getPercentage() > 80.0));
3.14) Collectors.collectingAndThen() :
Example : Collecting first three students into List and making it unmodifiable
List<Student> first3Students = studentList.stream().limit(3).collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));
